install.packages("oro.nifti")
oro.nifti::anlz([0,1,2])
library(oro.nifti)
neuro_isntall("oro.nifti")
neuro_install("oro.nifti")
neuro_install("oro.nifti")
source("https://neuroconductor.org/neurocLite.R")
neuro_install("oro.nifti")
neuro_install("oro.nifti")
library(oro.nifti)
#Use a particular function from a package.
n=100
oro.nifti::nifti(array(runif(n*n),c(n,n,1)))
ramdom.image@dim_
random.image@dim_
random.image@dim_
dim(random.image)
n=100
oro.nifti::nifti(array(runif(n*n),c(n,n,1)))
random.image@dim_
n=100
oro.nifti::nifti(array(runif(n * n),c(n, n, 1)))
random.image@dim_
data()
#Load a built-in dataset into the enviroment.
data(volcano)
#Returns the structure and information of a given object
str(volcano)
dim(volcano)
head(volcano)
class(volcano)
str(random.image)
str(volcano)
n=100
oro.nifti::nifti(array(runif(n * n),c(n, n, 1)))
n=100
random.image=oro.nifti::nifti(array(runif(n * n),c(n, n, 1)))
random.image@dim_
dim(random.image)
str(random.image)
(.packages())
"dplyr" %in% tolower((.packages()))
#Find the current working directory
getwd()
v = c(1,4,3,7,8)
print(v)
w = 1:5
print(w)
w <- 1:5
print(w)
m = matrix(1:12, nrow = 3)
print(m)
print(m[1,3])
print(m[1:2,3:4])
m
m=matrix(runf(n=!2,0,1),nrow = 3)
m=matrix(runif(n=!2,0,1),nrow = 3)
m
m=matrix(runif(n=12,0,1),nrow = 3)
m
m=matrix(runif(n=12,1,0),nrow = 3)
m[1]
m[1:2,]
m=matrix(runif(n=12,1,0),nrow = 3)
m=matrix(runif(n=12,1,0),nrow = 3)
m=matrix(runif(n=12,0,1),nrow = 3)
m[1:2,]
m[1,]
m[1:2,c(1,4)]
print(a[1,1,1])
a = array()
print(a[1,1,1])
a = array(1:36)
print(a[1,1,1])
a = array(1:36,dim=3)
print(a[1,1,1])
a[,4]
a = array(1:36,dim=c(3,4,3))
print(a[1,1,1])
a[,4]
dim(a)
a
a[,4]
a[,,4]
a[,,1]
a[0,,1]
a[1,,1]
a[1,,]
a[,1,]
a[1,,].T
t().a[1,,]
t(a[1,,])
print(sqrt(w^2))
print(v+w)
c(5.2,TRUE,FALSE)
c("hey",TRUE)
c(5.2,TRUE,"hey")
typeof(c(5.2,TRUE,FALSE))
x_length_2 = c(1,2)
x_length_3 = c(10,20,30)
x_length_2 + x_length_3
x_length_2 = c(1,2)
x_length_3 = c(10,20,30)
x_length_4 = c(10,20,30,40)
x_length_2 + x_length_4
print(!FALSE)
print(TRUE | FALSE)
print(TRUE & FALSE)
c(all(TRUE,FALSE))
x=c(1,3,4,,2,4,5,3,5,1,3)
x=c(1,3,4,4,2,4,5,3,5,1,3)
dim(x)
x=as.vector(x)
dim(x)
length(x)
x1=c(1,3,4,4,2,4,5,3,5,1,3)
x=c(1,3,4,4,2,4,5,3,5,1,3)
x1=as.vector(x)
x2=as.matrix(x)
x1
x2=as.matrix(x,ncol=1)
x3=as.matrix(x,nrow=1)
x3
dim(x3)
x4=t(x2)
x4
x %in% c(3,4)
x[x %in% c(3,4)]
df = data.frame(age = c(25,30,32,42),
handed = c("left","right","ambidextrous","left"),stringsAsFactors = FALSE)
df
print(df)
dim(df)
sample(nrom(df))
print(df)
dim(df)
sample(nrow(df))
head(df)
head(df)
str(df)
tbl = tibble::as_tibble(df)
class(tbl[,"age"])
class(df[,"age"])
#Otros operadores
x = c(5,2,3,42,6)
y =sqrt(mean(x))
y
y = x %>% mean %>% sqrt
x %>%
mean %>%
sqrt
library(magrittr) # needs to be run every time you start R and want to use %>%
library(dplyr)    # alternatively, this also loads %>%
install.packages("magrittr") # package installations are only needed the first time you use it
install.packages("dplyr")    # alternative installation of the %>%
library(magrittr) # needs to be run every time you start R and want to use %>%
library(dplyr)    # alternatively, this also loads %>%
x %>%
mean %>%
sqrt
install.packages("magrittr")
library(magrittr) # needs to be run every time you start R and want to use %>%
library(dplyr)    # alternatively, this also loads %>%
x %>%
mean %>%
sqrt
y = x %>% mean %>% sqrt
y
Auto <- read.table("Auto.data")
getwd()
gc()
library(feather)
install.packages("feather")
library(feather)
read_feather("C:\Users\veroh\OneDrive - Universidad de Antioquia\Articulo análisis longitudinal\Resultados_Armonizacion_BD\Datosparaorganizardataframes\Data_complete_roi.feather",columns=NULL)
read_feather(r"C:\Users\veroh\OneDrive - Universidad de Antioquia\Articulo análisis longitudinal\Resultados_Armonizacion_BD\Datosparaorganizardataframes\Data_complete_roi.feather",columns=NULL)
setwd("~/")
setwd("~/")
read_feather("Data_complete_roi.feather",columns=NULL)
read_feather("Data_complete_roi.feather")
setwd("~/")
detach("package:feather", unload = TRUE)
install.packages("MatchIt")
install.packages("MatchIt")
install.packages("MatchIt")
install.packages("MatchIt")
install.packages("MatchIt")
install.packages("MatchIt")
install.packages("openxlsx")
("Data_complete_roi.feather")
library(MatchIt)
library(openxlsx)
library(ggplot2)
library(MatchIt)
library(MatchIt)
library(ggplot2)
library(openxlsx)
library(MatchIt)
#Abrir base de datos y asignar factoriales a las variables cualitativas
vero <- read.xlsx ("Data_complete_roi.xlsx")
vero$treatall <- factor(vero$treatall)
library(ggplot2)
library(openxlsx)
library(MatchIt)
#Abrir base de datos y asignar factoriales a las variables cualitativas
vero <- read.xlsx ("Prueba.xlsx")
setwd("E:/Academico/Universidad/Posgrado/Tesis/Paquetes/eeg_harmonization/misc")
library(ggplot2)
library(openxlsx)
library(MatchIt)
#Abrir base de datos y asignar factoriales a las variables cualitativas
vero <- read.xlsx ("Prueba.xlsx")
vero$treatall <- factor(vero$treatall)
vero$treatG1 <- factor(vero$treatG1)
vero$sex <- factor(vero$sex)
vero$group <- factor(vero$group)
vero$participant_id <- factor(vero$participant_id)
class(vero)
veroEDADall <- matchit(treatall~age, data=vero, method = "nearest", ratio=1)
summary(veroEDADall)
